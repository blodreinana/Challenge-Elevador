#define MOTOR_A 6
#define MOTOR_B 5
#define MOTOR_ENA 9

#define BTN_ANDAR_0 A0
#define BTN_ANDAR_1 A1
#define BTN_ANDAR_2 A2
#define BTN_ANDAR_3 A3
#define BTN_ANDAR_4 A4
#define BTN_ANDAR_5 A5

const int VELOCIDADE_SUBIDA = 88;
const int VELOCIDADE_DESCIDA = 26;

const unsigned long TIME_PER_FLOOR_UP = 700;
const unsigned long TIME_PER_FLOOR_DOWN = 740;

const long ADJUST_SINGLE_UP = -20;
const long ADJUST_MULTI_UP = -150;
const long ADJUST_SINGLE_DOWN = 95;
const long ADJUST_MULTI_DOWN = -100;

const int BRAKE_SPEED = 60;
const int BRAKE_DURATION = 100;

const int MAX_FLOOR = 5;

int currentFloor = 0;

void setup() {
  pinMode(MOTOR_A,   OUTPUT);
  pinMode(MOTOR_B,   OUTPUT);
  pinMode(MOTOR_ENA, OUTPUT);

  pinMode(BTN_ANDAR_0, INPUT_PULLUP);
  pinMode(BTN_ANDAR_1, INPUT_PULLUP);
  pinMode(BTN_ANDAR_2, INPUT_PULLUP);
  pinMode(BTN_ANDAR_3, INPUT_PULLUP);
  pinMode(BTN_ANDAR_4, INPUT_PULLUP);
  pinMode(BTN_ANDAR_5, INPUT_PULLUP);

  Serial.begin(9600);
  Serial.print("Elevador no piso ");
  Serial.println(currentFloor);
}

void loop() {
  checkAndGo(0, BTN_ANDAR_0);
  checkAndGo(1, BTN_ANDAR_1);
  checkAndGo(2, BTN_ANDAR_2);
  checkAndGo(3, BTN_ANDAR_3);
  checkAndGo(4, BTN_ANDAR_4);
  checkAndGo(5, BTN_ANDAR_5);
}

void checkAndGo(int targetFloor, int floorBtn) {
  if (digitalRead(floorBtn) == LOW && targetFloor != currentFloor) {
    moveToFloor(targetFloor);
    while (digitalRead(floorBtn) == LOW) delay(10);
    delay(50);
  }
}

void moveToFloor(int targetFloor) {
  int delta = targetFloor - currentFloor;
  int absDelta = delta > 0 ? delta : -delta;
  unsigned long travelTime;
  bool goingUp = delta > 0;

  if (goingUp) {
    travelTime = (absDelta == 1)
      ? TIME_PER_FLOOR_UP + ADJUST_SINGLE_UP
      : TIME_PER_FLOOR_UP * absDelta + ADJUST_MULTI_UP * absDelta;
    analogWrite(MOTOR_A, VELOCIDADE_SUBIDA);
    analogWrite(MOTOR_ENA, VELOCIDADE_SUBIDA);
    digitalWrite(MOTOR_B, LOW);
  } else {
    travelTime = (absDelta == 1)
      ? TIME_PER_FLOOR_DOWN + ADJUST_SINGLE_DOWN
      : TIME_PER_FLOOR_DOWN * absDelta + ADJUST_MULTI_DOWN * absDelta;
    analogWrite(MOTOR_B, VELOCIDADE_DESCIDA);
    analogWrite(MOTOR_ENA, VELOCIDADE_DESCIDA);
    digitalWrite(MOTOR_A, LOW);
  }

  delay(travelTime);

  if (!(goingUp && targetFloor == MAX_FLOOR)) {
    if (goingUp) {
      analogWrite(MOTOR_B, BRAKE_SPEED);
      digitalWrite(MOTOR_A, LOW);
    } else {
      analogWrite(MOTOR_A, BRAKE_SPEED);
      digitalWrite(MOTOR_B, LOW);
    }
    delay(BRAKE_DURATION);
  }

  digitalWrite(MOTOR_A, LOW);
  digitalWrite(MOTOR_B, LOW);
  analogWrite(MOTOR_ENA, 0);

  currentFloor = targetFloor;
  Serial.print("Chegou no piso ");
  Serial.println(currentFloor);
}
